call plug#begin('~/.vim/plugins')
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-commentary'
Plug 'machakann/vim-sandwich'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/goyo.vim'
Plug 'aonemd/kuroi.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

set lazyredraw                                     "lazily redraw screen while executing macros, and other commands
set ttyfast                                        "more characters will be sent to the screen for redrawing
set ttimeout                                       "time waited for key press(es) to complete...
set ttimeoutlen=50                                 " ...makes for a faster key response
set noswapfile                                     "disable swap files
set autoread                                       "automatically read changes in the file
set hidden                                         "hide buffers instead of closing them even if they contain unwritten changes
set backspace=indent,eol,start                     "make backspace behave properly in insert mode
set clipboard=unnamedplus                          "use system clipboard; requires has('unnamedplus') to be 1
set wildmenu                                       "better menu with completion in command mode
set wildmode=longest:full,full
set completeopt=longest,menuone,preview            "better insert mode completions
set shortmess+=c                                   "don't give completion messages like 'match 1 of 2' or 'The only match'
set nowrap                                         "disable soft wrap for lines
set scrolloff=2                                    "always show 2 lines above/below the cursor
set showcmd                                        "display incomplete commands
set laststatus=2                                   "always display the status bar
set number relativenumber                          "display line numbers relatively
set signcolumn=yes                                 "show signs
set cursorline                                     "highlight current line
set colorcolumn=81                                 "display text width column
set splitbelow                                     "vertical splits will be at the bottom
set splitright                                     "horizontal splits will be to the right
set autoindent                                     "always set autoindenting on
set formatoptions-=cro                             "disable auto comments on new lines
set tabstop=2 shiftwidth=2 softtabstop=2 expandtab "use two spaces for indentation
set incsearch                                      "incremental search highlight
set ignorecase                                     "searches are case insensitive...
set smartcase                                      " ..unless they contain at least one capital letter
set hlsearch                                       "highlight search patterns

autocmd! FileType c    setlocal ts=4 sts=4 sw=4 noexpandtab
autocmd! FileType java setlocal ts=4 sts=4 sw=4 expandtab
autocmd! FileType make setlocal ts=8 sts=8 sw=8 noexpandtab

set t_Co=256                        "enable 256 colors
set background=dark
colorscheme kuroi

"status line: modifiedflag, charcount, filepercent, filepath
set statusline=%=%m\ %c\ %P\ %f

"remove current line highlight in unfocused window
au VimEnter,WinEnter,BufWinEnter,FocusGained,CmdwinEnter * set cul
au WinLeave,FocusLost,CmdwinLeave * set nocul

"resize Vim panes to be equal on window resize
autocmd! VimResized * :wincmd =

"The Leader
let mapleader="\<Space>"

nnoremap ! :!
nnoremap <leader>w :w<cr>
nnoremap <leader>m :make<cr>
"replace the word under cursor
nnoremap <leader>* :%s/\<<c-r><c-w>\>//g<left><left>
"toggle showing hidden characters
nnoremap <silent> <leader>s :set nolist!<cr>
"toggle spell checking
nnoremap <leader>ss :setlocal spell!<cr>
"toggle RTL mode
nnoremap <silent> <leader>l :set rl!<cr>
"override system files by typing :w!!
cnoremap w!! %!sudo tee > /dev/null %
"remove search highlight
nmap <leader>q :nohlsearch<CR>
"execute and replace current line in $SHELL with the output
nnoremap Q !!$SHELL<cr>
"set cwd to the directory of the current file
nnoremap <leader>cd :lcd %:p:h<cr>

nnoremap <leader>B :enew<cr>
nnoremap <Tab> :bnext<cr>
nnoremap <S-Tab> :bprevious<cr>
nnoremap <leader>bq :bp <bar> bd! #<cr>
nnoremap <leader>ba :bufdo bd!<cr>
"cycle between last two open buffers
nnoremap <leader><leader> <c-^>

"move lines around
nnoremap <leader>k :m-2<cr>==
nnoremap <leader>j :m+<cr>==
xnoremap <leader>k :m-2<cr>gv=gv
xnoremap <leader>j :m'>+<cr>gv=gv

"custom abbreviations
"inoreabbrev ignores custom mappings when executing the abbreviations
inoreabbrev cf () {<CR>}<UP><LEFT>
inoreabbrev af () => {<CR>}<UP>
inoreabbrev jf function() {<CR>}<UP><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT><RIGHT>
inoreabbrev df def()<CR>end<UP>

"autoclose tags
inoremap ( ()<Left>
inoremap { {}<Left>
inoremap [ []<Left>
inoremap " ""<Left>
inoremap ' ''<left>
inoremap '<space> '

"keep text selected after indentation
vnoremap < <gv
vnoremap > >gv

"fzf
let g:fzf_layout = { 'down': '~30%' }

nnoremap <leader>p :FZF<cr>
nnoremap <leader>o :Lines<cr>
nnoremap <leader>t :Tags<cr>
nnoremap <leader>r :Buffers<cr>

nnoremap \  :Rg<space>
nnoremap \| :Rg <C-R><C-W><cr>:cw<cr>

"Coc
"longer updatetime (default=4000 ms) leads to noticeable delays and poor user experience
set updatetime=300

"trigger completion menu with ctrl-space (terminal c-space as sends Nul)
inoremap <silent><expr> <Nul> coc#refresh()
"confirm selection using Enter key
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>cr <Plug>(coc-rename)
nmap <leader>cf :call CocAction('format')<cr>

"use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
 if (index(['vim', 'help', 'c'], &filetype) >= 0)
   execute 'h '.expand('<cword>')
 else
   call CocAction('doHover')
 endif
endfunction

"Ctags
set tags+=.git/tags
nnoremap <leader>ct :!ctags -Rf .git/tags --tag-relative --extra=+f --exclude=.git --exclude=pkg --exclude=.bundle --exclude=node_modules --languages=-sql<cr><cr>

"Signify
let g:signify_vcs_list = ['git', 'hg']
nmap <c-n> <plug>(signify-next-hunk)
nmap <c-p> <plug>(signify-prev-hunk)

"EasyAlign
nmap <leader>a <Plug>(EasyAlign)
xmap <leader>a <Plug>(EasyAlign)

"netrw
let g:netrw_banner=0
let g:netrw_winsize=20
let g:netrw_liststyle=3
let g:netrw_localrmdir='rm -r'
nnoremap <leader>n :Lexplore<CR>

"move to the split in the direction shown, or create a new split
nnoremap <silent> <C-h> :call WinMove('h')<cr>
nnoremap <silent> <C-j> :call WinMove('j')<cr>
nnoremap <silent> <C-k> :call WinMove('k')<cr>
nnoremap <silent> <C-l> :call WinMove('l')<cr>
function! WinMove(key)
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr())
    if (match(a:key,'[jk]'))
      wincmd v
    else
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction

"trailing whitespace
function! StripTrailingWhitespace()
  if !&binary && &filetype != 'diff'
    let w:winview = winsaveview()
    normal Hmy
    %s/\(\s\+$\)\|\($\n\s*\)\+\%$//e
    normal 'yz<CR>
    if exists('w:winview') | call winrestview(w:winview) | endif
  endif
endfunction
autocmd! BufWritePre * call StripTrailingWhitespace()

"smooth scroll
nnoremap <silent> <c-u> :call SmoothScroll(1)<cr>
nnoremap <silent> <c-d> :call SmoothScroll(0)<cr>
function! SmoothScroll(up)
  execute "normal " . (a:up ? "\<c-y>" : "\<c-e>")
  redraw
  for l:count in range(3, &scroll, 2)
    sleep 7m
    execute "normal " . (a:up ? "\<c-y>" : "\<c-e>")
    redraw
  endfor
  " bring the cursor in the middle of screen
  execute "normal M"
endfunction

"Goyo
nnoremap <leader>g :Goyo<cr>
if !exists('*s:goyo_leave')
  function s:goyo_leave()
    source $MYVIMRC
  endfunction
endif
autocmd! User GoyoLeave nested call <SID>goyo_leave()
